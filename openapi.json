{
  "openapi": "3.0.1",
  "info": {
    "title": "Chainlist Parser API",
    "description": "API microservice to fetch and provide validated, working RPC endpoints for EVM chains based on Chainlist data.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Chains",
      "description": "Operations related to fetching chain information and RPCs"
    }
  ],
  "paths": {
    "/chains": {
      "get": {
        "tags": [
          "Chains"
        ],
        "summary": "Get All Chains with Filtered RPC Endpoints",
        "description": "Retrieves a list of all known chains, each populated with filtered RPC endpoints: working HTTP/S URLs and all WSS URLs.",
        "operationId": "getAllChainsFiltered",
        "responses": {
          "200": {
            "description": "Successful retrieval of chains with filtered RPC endpoints.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainWithFilteredRPCs"
                  }
                },
                "example": [
                  {
                    "name": "Ethereum Mainnet",
                    "chain": "ETH",
                    "nativeCurrency": {
                      "name": "Ether",
                      "symbol": "ETH",
                      "decimals": 18
                    },
                    "shortName": "eth",
                    "chainId": 1,
                    "networkId": 1,
                    "rpcEndpoints": {
                      "http": [
                        "https://cloudflare-eth.com"
                      ],
                      "wss": [
                        "wss://ethereum.publicnode.com"
                      ]
                    }
                  },
                  {
                    "name": "Goerli Testnet",
                    "chain": "ETH",
                    "nativeCurrency": {
                      "name": "Goerli Ether",
                      "symbol": "ETH",
                      "decimals": 18
                    },
                    "shortName": "gor",
                    "chainId": 5,
                    "networkId": 5,
                    "rpcEndpoints": {
                      "http": [],
                      "wss": [
                        "wss://goerli.infura.io/ws/v3/YOUR_KEY"
                      ]
                    }
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Failed to fetch or process chain data."
          }
        }
      }
    },
    "/chains/{chainId}/rpcs": {
      "get": {
        "tags": [
          "Chains"
        ],
        "summary": "Get Filtered RPC Endpoints for a Specific Chain",
        "description": "Retrieves a list of filtered RPC endpoints (working HTTP/S and all WSS) for a specific chain identified by its chainId.",
        "operationId": "getChainFilteredRPCs",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "The unique identifier (integer) for the chain.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of filtered RPC endpoints. Returns empty lists if no suitable endpoints are found for the chain.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RpcResponse"
                },
                "example": {
                  "http": [
                    "https://cloudflare-eth.com"
                  ],
                  "wss": [
                    "wss://ethereum.publicnode.com",
                    "wss://mainnet.infura.io/ws/v3/YOUR_KEY"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The provided chainId is invalid (e.g., not an integer)."
          },
          "404": {
            "description": "Not Found. The chain with the specified chainId was not found, or it exists but has no working HTTP/S or any WSS endpoints."
          },
          "500": {
            "description": "Internal Server Error. Failed to process the request."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RpcResponse": {
        "type": "object",
        "description": "Contains lists of filtered RPC endpoints, separated by protocol type.",
        "properties": {
          "http": {
            "type": "array",
            "description": "List of working HTTP/S endpoint URLs.",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "example": ["https://rpc.ankr.com/eth"]
          },
          "wss": {
            "type": "array",
            "description": "List of all WSS endpoint URLs (status is not checked).",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "example": ["wss://ethereum.publicnode.com"]
          }
        }
      },
      "RPCDetail": {
        "type": "object",
        "description": "Details about a checked RPC endpoint.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://cloudflare-eth.com"
          },
          "protocol": {
            "type": "string",
            "enum": ["http", "https", "wss", "unknown"],
            "example": "https"
          },
          "isWorking": {
            "type": "boolean",
            "nullable": true,
            "description": "True if the RPC responded correctly (HTTP/S only), false if it failed, null if not checked (e.g., WSS).",
            "example": true
          },
          "latencyMs": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Response latency in milliseconds (only if isWorking is true).",
            "example": 95
          }
        },
        "required": [
          "url",
          "protocol"
        ]
      },
      "ChainWithFilteredRPCs": {
        "type": "object",
        "description": "Represents an EVM chain with its list of filtered RPC endpoints.",
        "allOf": [
          { "$ref": "#/components/schemas/ChainBaseCore" },
          {
            "type": "object",
            "properties": {
              "rpcEndpoints": {
                "$ref": "#/components/schemas/RpcResponse"
              }
            }
          }
        ]
      },
      "ChainBaseCore": {
        "type": "object",
        "description": "Core information about an EVM chain.",
        "properties": {
          "name": {
            "type": "string",
            "example": "Ethereum Mainnet"
          },
          "chain": {
            "type": "string",
            "example": "ETH"
          },
          "nativeCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "shortName": {
            "type": "string",
            "example": "eth"
          },
          "chainId": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the chain.",
            "example": 1
          },
          "networkId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        },
        "required": [
          "name",
          "chain",
          "nativeCurrency",
          "shortName",
          "chainId",
          "networkId"
        ]
      },
      "Currency": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Ether"
          },
          "symbol": {
            "type": "string",
            "example": "ETH"
          },
          "decimals": {
            "type": "integer",
            "example": 18
          }
        },
        "required": [
          "name",
          "symbol",
          "decimals"
        ]
      }
    }
  }
} 